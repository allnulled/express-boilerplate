Ejecutable como documento HTML5
    con autor allnulled
    con nombre generador-por-hql
    con versi√≥n 1
<head>
    <title>üåê Generador por HQL üåê</title>
    <meta charset="utf8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" type="text/css" href="lib/win7/win7.scoped.2.css" />
    <link rel="stylesheet" type="text/css" href="lib/ui-script/ui-script.css" />
    <link rel="stylesheet" type="text/css" href="lib/codemirror/codemirror.css" />
    <link rel="stylesheet" type="text/css" href="lib/theme/theme.css" />
    <script src="lib/calo/calo.js"></script>
    <script src="lib/codemirror/codemirror.js"></script>
    <script src="lib/ui-script/ui-script.js"></script>
    <script src="lib/hql/hql.js"></script>
</head>
<body><div id="app"></div></body>.

asigno window.PaginaDeInicio como un componente vue2 con nombre "PaginaDeInicio" con plantilla {
  <div class="PaginaDeInicio Component">
    <h5>üåê Generador por HQL üåê</h5>
    <div>
      <textarea ref="editor_de_entrada"></textarea>
    </div>
    <div style="padding: 4px;">
      <button style="width:100%;" v-on:click="validar">Validar</button>
    </div>
    <div v-if="error" style="padding: 4px;">
      <div style="background-color: red; color: white; font-family: monospace; font-size: 10px;" v-on:click="limpiar_error">{{ error.name }} {{ error.message }} {{ error.stack }}</div>
      <div v-on:click="limpiar_error" v-if="error.location">
        <pre style="background-color: red; color: white; font-family: monospace; font-size: 10px;">{{ error.location }}</pre>
        <pre style="background-color: red; color: white; font-family: monospace; font-size: 10px;">{{ error.expected }}</pre>
      </div>
    </div>
    <div>
      <textarea ref="editor_de_salida"></textarea>
    </div>
    <div style="padding: 4px;" v-if="!error && !!salida">
      <button style="width:100%;" v-on:click="descargar">Descargar</button>
    </div>
  </div>
} con l√≥gica {
  retorno {
    propiedad props como {
      propiedad root como {
        propiedad type como Object.
        propiedad required como true.
      }.
    }.
    m√©todo data donde {
      retorno {
        error: undefined,
        salida: undefined,
        cm_entrada: undefined,
        cm_entrada_timeout: undefined,
        cm_salida: undefined
      }.
    }.
    propiedad methods como {
      m√©todo limpiar_error donde {
        asigno this.error como undefined.
        hago this.$forceUpdate(true).
      }.
      m√©todo validar donde {
        creo entrada como this.cm_entrada.getValue().
        creo ast como Hql_parser.parse(entrada).
        asigno this.error como undefined.
        asigno this.salida como ast.
        hago this.cm_salida.setValue(JSON.stringify(ast, null, 2)).
      } en errores asigno this.error como error despu√©s hago this.$forceUpdate(true).
      m√©todo descargar donde {

      }.
    }.
    propiedad watch como {}.
    propiedad computed como {}.
    m√©todo beforeCreate donde {}.
    m√©todo created donde {}.
    m√©todo beforeMount donde {}.
    m√©todo mounted donde {
      asigno this.cm_entrada como CodeMirror.fromTextArea(this.$refs.editor_de_entrada, { lineNumbers: true }).
      asigno this.cm_salida como CodeMirror.fromTextArea(this.$refs.editor_de_salida, { lineNumbers: true }).
      hago this.cm_entrada.on("change", una lambda donde {
        hago clearTimeout(this.cm_entrada_timeout).
        asigno this.cm_entrada_timeout como setTimeout(una lambda donde {
          hago this.validar().
        }, 1500).
      }).
    }.
    m√©todo beforeUpdate donde {}.
    m√©todo updated donde {}.
    m√©todo beforeUnmount donde {}.
    m√©todo unmounted donde {}.
    m√©todo activated donde {}.
    m√©todo deactivated donde {}.
  }.
}.

asigno window.App como una aplicaci√≥n vue2 con nombre "App" con rutas [{
  propiedad path como "/".
  propiedad name como "PaginaDeInicio".
  propiedad component como PaginaDeInicio.
  propiedad props como {}.
}] con traducciones {
    propiedad es como {}.
    propiedad en como {}.
    propiedad ca como {}.
} con plantilla {
  <div class="App Component Castelog-app win7">
    <router-view :root="this"></router-view>
  </div>
} con estilos {
    html {}
    body {}
    .Component {}
    .App {}
} con l√≥gica {
  retorno {
    m√©todo data donde {
      retorno {}.
    }.
    propiedad methods como {}.
    propiedad watch como {}.
    m√©todo beforeMount donde {
      asigno this.$window como window.
    }.
    m√©todo mounted donde {}.
  }.
} montada en "#app".