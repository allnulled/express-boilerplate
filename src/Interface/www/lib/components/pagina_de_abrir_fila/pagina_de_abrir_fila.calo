asigno window.PaginaDeAbrirFila como un componente vue2 con nombre "PaginaDeAbrirFila" con plantilla {
  <div class="Component PaginaDeAbrirFila">
    <xtitle>Abrir fila de «{{ $route.params.tabla }}» con id «{{ $route.params.fila }}»</xtitle>
    <xlayout>
      <xlist>
        <xlistitem>
          <router-link to="/">
            <button class="boton_ancho_izquierda boton_azul">Ir a inicio</button>
          </router-link>
        </xlistitem>
        <xlistitem>
          <router-link to="/administracion">
            <button class="boton_ancho_izquierda boton_azul">Ir a panel de administración</button>
          </router-link>
        </xlistitem>
        <xlistitem>
          <router-link :to="'/abrir-tabla/' + $route.params.tabla">
            <button class="boton_ancho_izquierda boton_azul">Ir a abrir tabla «{{ $route.params.tabla }}»</button>
          </router-link>
        </xlistitem>
      </xlist>
    </xlayout>
    <xlayoutnopaddingtop>
      <template v-for="value, key in item">
        <xpanel style="padding-top:12px;" v-bind:key="'item-' + key" v-if="key !== 'id' && !key.startsWith('$')">
          <xpanel style="">{{ root.humanizar_texto_de_columna($route.params.tabla, key) }}:</xpanel>
          <xpanel v-if="false">
            --- Input rendering ---
          </xpanel>
          <xpanel v-else-if="root.compacted_schema[ $route.params.tabla ].composicion[key].atributos.es_tipo === 'color'">
            <input :ref="'color_' + $route.params.tabla" style="display:none;width:100%;" type="color" v-model="item[key]" />
            <button class="width_100" v-on:click="() => {$refs['color_' + $route.params.tabla][0].click() }">
              <span style="min-height:15px;min-width:30px;width:50%;display:inline-block;border-radius:4pt;" :style="'background-color:' + (item[key] || '#333')">
                {{ item[key] }}
              </span>
            </button>
          </xpanel>
          <xpanel v-else-if="root.compacted_schema[ $route.params.tabla ].composicion[key].atributos.es_tipo === 'fichero'">
            <input :ref="'file_' + key" style="display:none;width:100%;" type="file" v-on:change="event => { root.$window.console.log(event.target.files); item[key] = event.target.files }" />
            <xtable>
              <xtablebody>
                <xtablerow>
                  <xtablecell class="width_100">
                    <button class="width_100" style="white-space: nowrap;" v-on:click="() => {$refs['file_' + key][0].click() }">
                      Seleccionar
                    </button>
                  </xtablecell>
                  <xtablecell>
                    <button class="width_100" style="white-space: nowrap;" v-on:click="() => { guardar_fichero(key) }">
                      Guardar
                    </button>
                  </xtablecell>
                  <xtablecell>
                    <button class="width_100" style="white-space: nowrap;" v-on:click="() => { refrescar_fichero(key) }">
                      Refrescar
                    </button>
                  </xtablecell>
                </xtablerow>
                <xtablerow>
                  <xtablecell colspan="100" class="width_100" v-if="item[key] && typeof(item[key]) !== 'string' && item[key].length">
                    <span style="white-space: nowrap;">Hay {{ item[key] ? item[key].length : '0' }} ficheros seleccionados</span>
                  </xtablecell>
                </xtablerow>
                <xtablerow v-if="typeof item[key] === 'string'">
                  <xtablecell colspan="100">
                    <div style="text-align: center;">
                      <img class="imagen_de_fichero" :src="'/uploads/' + item[key]" />
                    </div>
                  </xtablecell>
                </xtablerow>
                <xtablerow v-if="item[key]">
                  <xtablecell colspan="100">
                    <template v-if="Array.isArray(item[key])" v-for="fichero, fichero_index in item[key]">
                      <xpanel v-bind:key="'column_' + key + '_file_' + fichero_index">
                        <div>Fichero: {{ fichero_index+1 }} de {{ item[key].length }}</div>
                        <div>Nombre: {{ fichero.name }}</div>
                        <div>Tamaño: {{ fichero.size }}B</div>
                      </xpanel>
                    </template>
                    <template v-if="typeof(item[key]) === 'string'">
                      <xpanel>
                        <div>{{item[key]}}</div>
                      </xpanel>
                    </template>
                  </xtablecell>
                </xtablerow>
              </xtablebody>
            </xtable>
          </xpanel>
          <xpanel v-else-if="typeof root.compacted_schema[ $route.params.tabla ].composicion[key].es_clave_foranea !== 'undefined'">
            <SelectorDeTabla :root="root" modo="uno" :tabla="root.compacted_schema[ $route.params.tabla ].composicion[key].es_clave_foranea.tabla_foranea" :al-cambiar="v => item[key] = v" :valor-inicial="item[key]" />
          </xpanel>
          <xpanel v-else-if="root.compacted_schema[ $route.params.tabla ].composicion[key].tipo === 'VARCHAR'">
            <input style="width:100%;" type="text" v-model="item[key]" />
          </xpanel>
          <xpanel v-else-if="root.compacted_schema[ $route.params.tabla ].composicion[key].tipo === 'INTEGER'">
            <input style="width:100%;" type="number" v-model="item[key]" />
          </xpanel>
          <xpanel v-else-if="root.compacted_schema[ $route.params.tabla ].composicion[key].tipo === 'FLOAT'">
            <input style="width:100%;" type="number" v-model="item[key]" />
          </xpanel>
          <xpanel v-else-if="root.compacted_schema[ $route.params.tabla ].composicion[key].tipo === 'TEXT'">
            <textarea style="width:100%;min-height:80px;resize:vertical;" v-model="item[key]"></textarea>
          </xpanel>
          <xpanel v-else-if="root.compacted_schema[ $route.params.tabla ].composicion[key].tipo === 'DATETIME'">
            <input style="width:100%;" type="datetime-local" v-model="item[key]" />
          </xpanel>
          <xpanel v-else-if="false">
            --- END OF Input rendering ---
          </xpanel>
        </xpanel>
      </template>
    </xlayoutnopaddingtop>
    <xseparator/>
    <xlayout>
      <xlist>
        <xlistitem>
          <button class="boton_ancho_centro boton_verde" v-on:click="guardar_item">Guardar ítem «{{ $route.params.tabla }}»</button>
        </xlistitem>
        <xlistitem>
          <button class="boton_ancho_centro boton_rojo" v-on:click="eliminar_item">Eliminar ítem «{{ $route.params.tabla }}»</button>
        </xlistitem>
      </xlist>
    </xlayout>
  </div>
} con lógica {
  retorno {
    propiedad props como {
      propiedad root como {
        propiedad type como Object.
        propiedad required como true.
      }.
    }.
    método data donde {
      retorno {
        item: false
      }.
    }.
    propiedad methods como {
      método asíncrono obtener_datos_de_fila donde {
        debugo "PaginaDeAbrirFila.obtener_datos_de_fila".
        creo respuesta_datos_de_fila como asíncronamente una petición http
          con url "/Select"
          con método "POST"
          con cuerpo {
            table: this.$route.params.tabla,
            where: [[ "id", "=", this.$route.params.fila ]]
          }
          con cabeceras { authorization: this.root.sesion_token }
          en errores retorno Vue.prototype.$dialogs.error(error).
        si respuesta_datos_de_fila es instancia de Error retorno.
        si respuesta_datos_de_fila.data.data.output.length es igual que 0 retorno this.$router.history.push("/abrir-tabla/" + this.$route.params.tabla).
        asigno this.item como respuesta_datos_de_fila.data.data.output[0].
        hago this.$forceUpdate(true).
      }.
      método asíncrono guardar_item donde {
        debugo "PaginaDeAbrirFila.guardar_item".
        creo clon_de_item como {} extendido por this.item.
        creo claves_de_item como un conjunto de claves del objeto clon_de_item.
        desde 0 hasta claves_de_item.length {
          creo clave como claves_de_item[index].
          si clon_de_item[clave] es tipo objeto {
            elimino propiedad clon_de_item[clave].
          }.
        }.
        creo respuesta_guardar_datos_de_fila como asíncronamente una petición http
          con url "/Update"
          con método "POST"
          con cuerpo {
            table: this.$route.params.tabla,
            id: this.$route.params.fila,
            item: clon_de_item
          }
          con cabeceras { authorization: this.root.sesion_token }
          en errores retorno Vue.prototype.$dialogs.error(error).
        si respuesta_guardar_datos_de_fila es instancia de Error retorno.
        hago asíncronamente this.obtener_datos_de_fila().
        hago this.$forceUpdate(true).
      }.
      método asíncrono eliminar_item donde {
        debugo "PaginaDeAbrirFila.eliminar_item".
        creo confirmacion como asíncronamente Vue.prototype.$dialogs.form({
          title: "Eliminar registro",
          html: "<xlayout>¿Seguro que quieres eliminar el registro «" + this.$route.params.fila + "» de «" + this.$route.params.tabla + "»?</xlayout><xseparator /><xpanel class=''><button class='boton_rojo padding_bottom_1 margin_left_1 margin_bottom_1' v-on:click='finalize_dialog_accepting'>Sí, seguro</button><button class='boton_azul padding_bottom_1 margin_left_1 margin_bottom_1' v-on:click='finalize_dialog_rejecting'>Cancelar</button></xpanel>",
          footer: false
        }).
        si confirmacion es igual que false retorno.
        creo respuesta_eliminar_dato_de_fila como asíncronamente una petición http
          con url "/Delete"
          con método "POST"
          con cuerpo {
            table: this.$route.params.tabla,
            id: this.$route.params.fila
          }
          con cabeceras { authorization: this.root.sesion_token }
          en errores retorno Vue.prototype.$dialogs.error(error).
        si respuesta_eliminar_dato_de_fila es instancia de Error retorno.
        hago this.$router.history.push("/abrir-tabla/" + this.$route.params.tabla).
        hago this.$forceUpdate(true).
      }.
      método asíncrono guardar_fichero con (columna) donde {
        debugo "PaginaDeAbrirFila.guardar_fichero".
        desacoplo constantes [ fichero ] a partir de this.item[columna].
        creo formulario como un nuevo FormData().
        hago formulario.append("table", this.$route.params.tabla).
        hago formulario.append("id", this.item.id).
        hago formulario.append("column", columna).
        hago formulario.append("file", fichero).
        creo respuesta_fichero como asíncronamente una petición http
          con url "/SetFile"
          con método "POST"
          con cuerpo formulario
          con cabeceras { authorization: this.root.sesion_token, "Content-type": "multipart/form-data" }
          en errores retorno Vue.prototype.$dialogs.error(error).
        si respuesta_fichero es instancia de Error retorno.
        hago asíncronamente this.obtener_datos_de_fila().
      }.
      método asíncrono refrescar_fichero con (columna) donde {
        hago asíncronamente this.obtener_datos_de_fila().
      }.
    }.
    propiedad watch como {}.
    propiedad computed como {}.
    método beforeCreate donde {}.
    método created donde {}.
    método beforeMount donde {}.
    método asíncrono mounted donde {
        debugo "PaginaDeAbrirFila.mounted".
      hago asíncronamente this.obtener_datos_de_fila().
    }.
    método beforeUpdate donde {}.
    método updated donde {}.
    método beforeUnmount donde {}.
    método unmounted donde {}.
    método activated donde {}.
    método deactivated donde {}.
  }.
}.