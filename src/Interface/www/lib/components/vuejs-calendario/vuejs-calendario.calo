asigno window.VuejsCalendario como un componente vue2 con nombre "VuejsCalendario" con plantilla {
  <div class="Component VuejsCalendario">
    <div class="entrada_de_calendario">
      <table class="tabla_de_entrada_de_calendario">
        <tbody>
          <tr>
            <td style="width: 100%;">
              <input style="width:100%;" type="text" v-model="valor_de_fecha_en_texto" disabled="true" />
            </td>
            <td>
              <button class="boton_de_calendario" v-on:click="alternar_calendario" v-if="!esta_mostrando_calendario">Cambiar</button>
              <button class="boton_de_calendario" v-on:click="alternar_calendario" v-else="">Dejar</button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
    <div class="calendario" style="max-width: 200px;" v-if="esta_mostrando_calendario">
      <div class="chivato_de_fecha">{{ obtener_fecha_formateada(fecha_seleccionada) }}</div>
      <div class="chivato_de_fecha">a las {{ espaciar_izquierda(hora_seleccionada, 2) }}:{{ espaciar_izquierda(minuto_seleccionado, 2) }}:{{ espaciar_izquierda(segundo_seleccionado, 2) }}.{{ espaciar_izquierda(milisegundo_seleccionado, 3) }}</div>
      <table class="tabla_de_calendario">
        <tbody>
          <tr>
            <td>
              <button class="boton_de_mover_mes" v-on:click="ir_a_mes_anterior"> ◀ </button>
            </td>
            <td>
              <button class="boton_de_mover_mes" v-on:click="ir_a_mes_siguiente"> ▶ </button>
            </td>
          </tr>
        </tbody>
      </table>
      <table class="tabla_de_calendario">
        <tbody>
          <tr v-for="semana, semana_index in celdas_del_mes_actual" v-bind:key="'semana-' + semana_index">
            <td v-for="dia, dia_index in semana" v-bind:key="'dia-' + dia_index">
              <span v-if="dia">
                <button class="boton_de_calendario" :class="{active: dia.getDate() === fecha_seleccionada.getDate()}" v-on:click="() => seleccionar_dia(dia)">{{ dia.getDate() }}</button>
              </span>
            </td>
          </tr>
        </tbody>
      </table>
      <table class="tabla_de_calendario" v-if="!soloFecha">
        <tbody>
          <tr>
            <td>
              <button class="boton_de_calendario" v-on:click="agregar_hora"> ▲ </button>
            </td>
            <td>
              <button class="boton_de_calendario" v-on:click="agregar_minuto"> ▲ </button>
            </td>
            <td>
              <button class="boton_de_calendario" v-on:click="agregar_segundo"> ▲ </button>
            </td>
          </tr>
          <tr>
            <td>
              <table>
                <tr>
                  <td><input class="entrada_de_calendario" type="text" v-model="hora_seleccionada" /></td>
                  <td>:</td>
                </tr>
              </table>
            </td>
            <td>
              <table>
                <tr>
                  <td><input class="entrada_de_calendario" type="text" v-model="minuto_seleccionado" /></td>
                  <td>:</td>
                </tr>
              </table>
            </td>
            <td>
              <table>
                <tr>
                  <td><input class="entrada_de_calendario" type="text" v-model="segundo_seleccionado" /></td>
                </tr>
              </table>
            </td>
          </tr>
          <tr>
            <td>
              <button class="boton_de_calendario" v-on:click="quitar_hora"> ▼ </button>
            </td>
            <td>
              <button class="boton_de_calendario" v-on:click="quitar_minuto"> ▼ </button>
            </td>
            <td>
              <button class="boton_de_calendario" v-on:click="quitar_segundo"> ▼ </button>
            </td>
          </tr>
          <tr>
            <td colspan="100">
              <input class="entrada_de_calendario" type="text" v-model="milisegundo_seleccionado" />
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
} con lógica {
  retorno {
    propiedad props como {
      propiedad soloFecha como {
        propiedad type como Boolean.
        propiedad default como false.
      }.
      propiedad alCambiar como {
        propiedad type como Function.
        propiedad default como una función.
      }.
      propiedad valorInicial como {
        propiedad type como [String, Date].
        propiedad default como una función donde retorno un nuevo Date().
      }.
    }.
    método data donde {
      debugo "VuejsCalendario.data".
      retorno {
        valor_de_fecha_en_texto: "",
        esta_mostrando_calendario: false,
        fecha_seleccionada: undefined,
        celdas_del_mes_actual: undefined,
        hora_seleccionada: undefined,
        minuto_seleccionado: undefined,
        segundo_seleccionado: undefined,
        milisegundo_seleccionado: undefined
      }.
    }.
    propiedad methods como {
      método alternar_calendario donde {
        debugo "VuejsCalendario.alternar_calendario".
        asigno this.esta_mostrando_calendario como no this.esta_mostrando_calendario.
        hago this.$forceUpdate(true).
      }.
      método ir_a_mes_anterior donde {
        debugo "VuejsCalendario.ir_a_mes_anterior".
        creo nueva_fecha como un nuevo Date(this.fecha_seleccionada).
        hago nueva_fecha.setMonth(nueva_fecha.getMonth() - 1).
        asigno this.fecha_seleccionada como nueva_fecha.
      }.
      método ir_a_mes_siguiente donde {
        debugo "VuejsCalendario.ir_a_mes_siguiente".
        creo nueva_fecha como un nuevo Date(this.fecha_seleccionada).
        hago nueva_fecha.setMonth(nueva_fecha.getMonth() + 1).
        asigno this.fecha_seleccionada como nueva_fecha.
      }.
      método agregar_hora donde {
        debugo "VuejsCalendario.agregar_hora".
        creo variable hora como parseInt(this.hora_seleccionada).
        incremento hora.
        asigno this.hora_seleccionada como hora.
      }.
      método agregar_minuto donde {
        debugo "VuejsCalendario.agregar_minuto".
        creo variable minuto como parseInt(this.minuto_seleccionado).
        incremento minuto.
        asigno this.minuto_seleccionado como minuto.
      }.
      método agregar_segundo donde {
        debugo "VuejsCalendario.agregar_segundo".
        creo variable segundo como parseInt(this.segundo_seleccionado).
        incremento segundo.
        asigno this.segundo_seleccionado como segundo.
      }.
      método quitar_hora donde {
        debugo "VuejsCalendario.quitar_hora".
        creo variable hora como parseInt(this.hora_seleccionada).
        decremento hora.
        asigno this.hora_seleccionada como hora.
      }.
      método quitar_minuto donde {
        debugo "VuejsCalendario.quitar_minuto".
        creo variable minuto como parseInt(this.minuto_seleccionado).
        decremento minuto.
        asigno this.minuto_seleccionado como minuto.
      }.
      método quitar_segundo donde {
        debugo "VuejsCalendario.quitar_segundo".
        creo variable segundo como parseInt(this.segundo_seleccionado).
        decremento segundo.
        asigno this.segundo_seleccionado como segundo.
      }.
      método seleccionar_dia con (dia) donde {
        debugo "VuejsCalendario.seleccionar_dia".
        asigno this.fecha_seleccionada como dia.
      }.
      método espaciar_izquierda con (texto, longitud, relleno o en su defecto "0") donde {
        debugo "VuejsCalendario.espaciar_izquierda".
        creo variable salida como "" + texto.
        mientras salida.length es menor que longitud {
          asigno salida como relleno + salida.
        }.
        retorno salida.
      }.
      método obtener_valor donde {
        debugo "VuejsCalendario.obtener_valor".
        creo fecha como un nuevo Date(this.fecha_seleccionada).
        si this.hora_seleccionada es tipo indefinido {
          asigno this.hora_seleccionada como fecha.getHours().
        }.
        si this.minuto_seleccionado es tipo indefinido {
          asigno this.minuto_seleccionado como fecha.getMinutes().
        }.
        si this.segundo_seleccionado es tipo indefinido {
          asigno this.segundo_seleccionado como fecha.getSeconds().
        }.
        si this.milisegundo_seleccionado es tipo indefinido {
          asigno this.milisegundo_seleccionado como fecha.getMilliseconds().
        }.
        creo variable salida como "".
        incremento salida en this.espaciar_izquierda(fecha.getFullYear(), 4, "0").
        incremento salida en "-".
        incremento salida en this.espaciar_izquierda(fecha.getMonth(), 2, "0").
        incremento salida en "-".
        incremento salida en this.espaciar_izquierda(fecha.getDate(), 2, "0").
        incremento salida en " ".
        incremento salida en this.espaciar_izquierda(this.hora_seleccionada, 2, "0").
        incremento salida en ":".
        incremento salida en this.espaciar_izquierda(this.minuto_seleccionado, 2, "0").
        incremento salida en ":".
        incremento salida en this.espaciar_izquierda(this.segundo_seleccionado, 2, "0").
        incremento salida en ".".
        incremento salida en this.espaciar_izquierda(this.milisegundo_seleccionado, 3, "0").
        asigno this.valor_de_fecha_en_texto como salida.
        hago this.$forceUpdate(true).
        hago this.alCambiar(salida, this).
        retorno salida.
      }.
      método obtener_fecha_formateada con (fecha) donde {
        debugo "VuejsCalendario.obtener_fecha_formateada".
        si fecha es tipo indefinido retorno.
        creo variable formato como "".
        incremento formato en un hecho donde {
          si fecha.getDay() es igual que 0 retorno "Domingo".
          si fecha.getDay() es igual que 1 retorno "Lunes".
          si fecha.getDay() es igual que 2 retorno "Martes".
          si fecha.getDay() es igual que 3 retorno "Miércoles".
          si fecha.getDay() es igual que 4 retorno "Jueves".
          si fecha.getDay() es igual que 5 retorno "Viernes".
          si fecha.getDay() es igual que 6 retorno "Sábado".
        }.
        incremento formato en ", ".
        incremento formato en fecha.getDate().
        incremento formato en " de ".
        incremento formato en un hecho donde {
          si fecha.getMonth() es igual que 0 retorno "Enero".
          si fecha.getMonth() es igual que 1 retorno "Febrero".
          si fecha.getMonth() es igual que 2 retorno "Marzo".
          si fecha.getMonth() es igual que 3 retorno "Abril".
          si fecha.getMonth() es igual que 4 retorno "Mayo".
          si fecha.getMonth() es igual que 5 retorno "Junio".
          si fecha.getMonth() es igual que 6 retorno "Julio".
          si fecha.getMonth() es igual que 7 retorno "Agosto".
          si fecha.getMonth() es igual que 8 retorno "Septiembre".
          si fecha.getMonth() es igual que 9 retorno "Octubre".
          si fecha.getMonth() es igual que 10 retorno "Noviembre".
          si fecha.getMonth() es igual que 11 retorno "Diciembre".
        }.
        incremento formato en " de ".
        incremento formato en fecha.getFullYear().
        retorno formato.
      }.
      método pasar_a_fecha con (fecha_en_cualquier_formato) donde {
        debugo "VuejsCalendario.pasar_a_fecha".
        creo variable salida como undefined.
        si fecha_en_cualquier_formato es tipo texto {
          asigno salida como un nuevo Date(fecha_en_cualquier_formato).
          hago salida.setMonth(salida.getMonth() + 1).
        }.
        si fecha_en_cualquier_formato es instancia de Date {
          asigno salida como fecha_en_cualquier_formato.
        }.
        retorno salida.
        lanzo un nuevo Error("Formato de fecha no soportado").
      }.
    }.
    propiedad watch como {
      método fecha_seleccionada con (nuevo_valor) donde {
        debugo "VuejsCalendario.watch.fecha_seleccionada".
        creo dias como [].
        creo dia_1_del_mes como un nuevo Date(nuevo_valor).
        hago dia_1_del_mes.setDate(1).
        hago dia_1_del_mes.setHours(0).
        hago dia_1_del_mes.setMinutes(0).
        hago dia_1_del_mes.setSeconds(0).
        hago dia_1_del_mes.setMilliseconds(0).
        creo dias_antes_de_entrar_en_el_mes como un hecho donde {
          creo dia_de_semana como dia_1_del_mes.getDay().
          si dia_de_semana es igual que 0 retorno 6.
          si dia_de_semana es igual que 1 retorno 0.
          si dia_de_semana es igual que 2 retorno 1.
          si dia_de_semana es igual que 3 retorno 2.
          si dia_de_semana es igual que 4 retorno 3.
          si dia_de_semana es igual que 5 retorno 4.
          si dia_de_semana es igual que 6 retorno 5.
        }.
        creo celdas_vacias_anteriores como un nuevo Array(dias_antes_de_entrar_en_el_mes).
        creo dia_final_del_mes como un nuevo Date(nuevo_valor).
        hago dia_final_del_mes.setMonth(dia_final_del_mes.getMonth() + 1).
        hago dia_final_del_mes.setDate(1).
        hago dia_final_del_mes.setDate(dia_final_del_mes.getDate() - 1).
        creo numero_final_de_mes como dia_final_del_mes.getDate().
        creo variable fila_actual como celdas_vacias_anteriores.
        desde 1 hasta numero_final_de_mes + 1 {
          creo nueva_fecha como un nuevo Date(dia_1_del_mes).
          hago nueva_fecha.setDate(index).
          hago fila_actual.push(nueva_fecha).
          si nueva_fecha.getDay() es igual que 0 {
            hago dias.push(fila_actual).
            asigno fila_actual como [].
          }.
        }.
        si fila_actual.length {
          hago dias.push(fila_actual).
        }.
        asigno this.celdas_del_mes_actual como dias.
        hago this.obtener_valor().
      }.
      método hora_seleccionada con (nuevo_valor) donde {
        debugo "VuejsCalendario.watch.hora_seleccionada".
        hago this.obtener_valor().
      }.
      método minuto_seleccionado con (nuevo_valor) donde {
        debugo "VuejsCalendario.watch.minuto_seleccionado".
        hago this.obtener_valor().
      }.
      método segundo_seleccionado con (nuevo_valor) donde {
        debugo "VuejsCalendario.watch.segundo_seleccionado".
        hago this.obtener_valor().
      }.
      método milisegundo_seleccionado con (nuevo_valor) donde {
        debugo "VuejsCalendario.watch.milisegundo_seleccionado".
        hago this.obtener_valor().
      }.
    }.
    método mounted donde {
      debugo "VuejsCalendario.mounted".
      asigno this.fecha_seleccionada como this.pasar_a_fecha(this.valorInicial).
    }.
  }.
}.